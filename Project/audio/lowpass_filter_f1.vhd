-- -------------------------------------------------------------
--
-- Module: lowpass_filter_f1
--
-- Generated by MATLAB(R) 7.5 and the Filter Design HDL Coder 2.1.
--
-- Generated on: 2010-05-10 02:33:13
--
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: lowpass_filter_f1
-- TestBenchStimulus: chirp impulse noise ramp step 
--
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form Symmetric FIR
-- Filter Length     : 21
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,18 -> [-1.250000e-001 1.250000e-001)
-- Input             : s16,15 -> [-1 1)
-- Filter Internals  : Specify Precision
--   Output          : s16,15 -> [-1 1)
--   Tap Sum         : s17,15 -> [-2 2)
--   Product         : s32,31 -> [-1 1)
--   Accumulator     : s33,31 -> [-2 2)
--   Round Mode      : convergent
--   Overflow Mode   : saturate
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY lowpass_filter_f1 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
         );

END lowpass_filter_f1;


----------------------------------------------------------------
--Module Architecture: lowpass_filter_f1
----------------------------------------------------------------
ARCHITECTURE rtl OF lowpass_filter_f1 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(23085, 16); -- sfix16_En18
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(7868, 16); -- sfix16_En18
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(8998, 16); -- sfix16_En18
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(10110, 16); -- sfix16_En18
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(11128, 16); -- sfix16_En18
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(12042, 16); -- sfix16_En18
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(12846, 16); -- sfix16_En18
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(13486, 16); -- sfix16_En18
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(13950, 16); -- sfix16_En18
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(14251, 16); -- sfix16_En18
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(14356, 16); -- sfix16_En18

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 20); -- sfix16_En15
  SIGNAL tapsum1                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum2                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_1                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum3                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_2                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum4                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_3                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum5                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_4                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum6                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_5                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum7                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_6                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum8                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_7                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum9                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_8                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum10                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_9                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL product11                        : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp                         : signed(31 DOWNTO 0); -- sfix32_En33
  SIGNAL product10                        : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_1                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product9                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_2                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product8                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_3                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product7                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_4                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product6                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_5                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product5                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_6                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product4                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_7                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product3                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_8                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product2                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_9                       : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL product1_cast                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product1                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL mul_temp_10                      : signed(32 DOWNTO 0); -- sfix33_En33
  SIGNAL sum1                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp                         : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum2                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_1                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum3                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_2                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum4                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_3                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum5                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_4                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum6                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_5                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum7                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_6                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum8                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_7                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum9                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_8                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum10                            : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_9                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 20) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 20) <= delay_pipeline(0 TO 19);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;


  tapsum1 <= resize(delay_pipeline(0), 17) + resize(delay_pipeline(20), 17);

  tapsum_mcand <= tapsum1;

  tapsum2 <= resize(delay_pipeline(1), 17) + resize(delay_pipeline(19), 17);

  tapsum_mcand_1 <= tapsum2;

  tapsum3 <= resize(delay_pipeline(2), 17) + resize(delay_pipeline(18), 17);

  tapsum_mcand_2 <= tapsum3;

  tapsum4 <= resize(delay_pipeline(3), 17) + resize(delay_pipeline(17), 17);

  tapsum_mcand_3 <= tapsum4;

  tapsum5 <= resize(delay_pipeline(4), 17) + resize(delay_pipeline(16), 17);

  tapsum_mcand_4 <= tapsum5;

  tapsum6 <= resize(delay_pipeline(5), 17) + resize(delay_pipeline(15), 17);

  tapsum_mcand_5 <= tapsum6;

  tapsum7 <= resize(delay_pipeline(6), 17) + resize(delay_pipeline(14), 17);

  tapsum_mcand_6 <= tapsum7;

  tapsum8 <= resize(delay_pipeline(7), 17) + resize(delay_pipeline(13), 17);

  tapsum_mcand_7 <= tapsum8;

  tapsum9 <= resize(delay_pipeline(8), 17) + resize(delay_pipeline(12), 17);

  tapsum_mcand_8 <= tapsum9;

  tapsum10 <= resize(delay_pipeline(9), 17) + resize(delay_pipeline(11), 17);

  tapsum_mcand_9 <= tapsum10;

  mul_temp <= delay_pipeline(10) * coeff11;
  product11 <= resize(shift_right(mul_temp(31) & mul_temp(31 DOWNTO 0) + ( "0" & (mul_temp(2) & NOT mul_temp(2))), 2), 32);

  mul_temp_1 <= tapsum_mcand_9 * coeff10;
  product10 <= resize(shift_right(mul_temp_1(32) & mul_temp_1(32 DOWNTO 0) + ( "0" & (mul_temp_1(2) & NOT mul_temp_1(2))), 2), 32);

  mul_temp_2 <= tapsum_mcand_8 * coeff9;
  product9 <= resize(shift_right(mul_temp_2(32) & mul_temp_2(32 DOWNTO 0) + ( "0" & (mul_temp_2(2) & NOT mul_temp_2(2))), 2), 32);

  mul_temp_3 <= tapsum_mcand_7 * coeff8;
  product8 <= resize(shift_right(mul_temp_3(32) & mul_temp_3(32 DOWNTO 0) + ( "0" & (mul_temp_3(2) & NOT mul_temp_3(2))), 2), 32);

  mul_temp_4 <= tapsum_mcand_6 * coeff7;
  product7 <= resize(shift_right(mul_temp_4(32) & mul_temp_4(32 DOWNTO 0) + ( "0" & (mul_temp_4(2) & NOT mul_temp_4(2))), 2), 32);

  mul_temp_5 <= tapsum_mcand_5 * coeff6;
  product6 <= resize(shift_right(mul_temp_5(32) & mul_temp_5(32 DOWNTO 0) + ( "0" & (mul_temp_5(2) & NOT mul_temp_5(2))), 2), 32);

  mul_temp_6 <= tapsum_mcand_4 * coeff5;
  product5 <= resize(shift_right(mul_temp_6(32) & mul_temp_6(32 DOWNTO 0) + ( "0" & (mul_temp_6(2) & NOT mul_temp_6(2))), 2), 32);

  mul_temp_7 <= tapsum_mcand_3 * coeff4;
  product4 <= resize(shift_right(mul_temp_7(32) & mul_temp_7(32 DOWNTO 0) + ( "0" & (mul_temp_7(2) & NOT mul_temp_7(2))), 2), 32);

  mul_temp_8 <= tapsum_mcand_2 * coeff3;
  product3 <= resize(shift_right(mul_temp_8(32) & mul_temp_8(32 DOWNTO 0) + ( "0" & (mul_temp_8(2) & NOT mul_temp_8(2))), 2), 32);

  mul_temp_9 <= tapsum_mcand_1 * coeff2;
  product2 <= resize(shift_right(mul_temp_9(32) & mul_temp_9(32 DOWNTO 0) + ( "0" & (mul_temp_9(2) & NOT mul_temp_9(2))), 2), 32);

  product1_cast <= resize(product1, 33);

  mul_temp_10 <= tapsum_mcand * coeff1;
  product1 <= resize(shift_right(mul_temp_10(32) & mul_temp_10(32 DOWNTO 0) + ( "0" & (mul_temp_10(2) & NOT mul_temp_10(2))), 2), 32);

  add_temp <= resize(product1_cast, 34) + resize(product2, 34);
  sum1 <= (32 => '0', OTHERS => '1') WHEN (add_temp(33) = '0' AND add_temp(32) /= '0') OR (add_temp(33) = '0' AND add_temp(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp(33) = '1' AND add_temp(32) /= '1'
      ELSE (add_temp(32 DOWNTO 0));

  add_temp_1 <= resize(sum1, 34) + resize(product3, 34);
  sum2 <= (32 => '0', OTHERS => '1') WHEN (add_temp_1(33) = '0' AND add_temp_1(32) /= '0') OR (add_temp_1(33) = '0' AND add_temp_1(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_1(33) = '1' AND add_temp_1(32) /= '1'
      ELSE (add_temp_1(32 DOWNTO 0));

  add_temp_2 <= resize(sum2, 34) + resize(product4, 34);
  sum3 <= (32 => '0', OTHERS => '1') WHEN (add_temp_2(33) = '0' AND add_temp_2(32) /= '0') OR (add_temp_2(33) = '0' AND add_temp_2(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_2(33) = '1' AND add_temp_2(32) /= '1'
      ELSE (add_temp_2(32 DOWNTO 0));

  add_temp_3 <= resize(sum3, 34) + resize(product5, 34);
  sum4 <= (32 => '0', OTHERS => '1') WHEN (add_temp_3(33) = '0' AND add_temp_3(32) /= '0') OR (add_temp_3(33) = '0' AND add_temp_3(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_3(33) = '1' AND add_temp_3(32) /= '1'
      ELSE (add_temp_3(32 DOWNTO 0));

  add_temp_4 <= resize(sum4, 34) + resize(product6, 34);
  sum5 <= (32 => '0', OTHERS => '1') WHEN (add_temp_4(33) = '0' AND add_temp_4(32) /= '0') OR (add_temp_4(33) = '0' AND add_temp_4(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_4(33) = '1' AND add_temp_4(32) /= '1'
      ELSE (add_temp_4(32 DOWNTO 0));

  add_temp_5 <= resize(sum5, 34) + resize(product7, 34);
  sum6 <= (32 => '0', OTHERS => '1') WHEN (add_temp_5(33) = '0' AND add_temp_5(32) /= '0') OR (add_temp_5(33) = '0' AND add_temp_5(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_5(33) = '1' AND add_temp_5(32) /= '1'
      ELSE (add_temp_5(32 DOWNTO 0));

  add_temp_6 <= resize(sum6, 34) + resize(product8, 34);
  sum7 <= (32 => '0', OTHERS => '1') WHEN (add_temp_6(33) = '0' AND add_temp_6(32) /= '0') OR (add_temp_6(33) = '0' AND add_temp_6(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_6(33) = '1' AND add_temp_6(32) /= '1'
      ELSE (add_temp_6(32 DOWNTO 0));

  add_temp_7 <= resize(sum7, 34) + resize(product9, 34);
  sum8 <= (32 => '0', OTHERS => '1') WHEN (add_temp_7(33) = '0' AND add_temp_7(32) /= '0') OR (add_temp_7(33) = '0' AND add_temp_7(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_7(33) = '1' AND add_temp_7(32) /= '1'
      ELSE (add_temp_7(32 DOWNTO 0));

  add_temp_8 <= resize(sum8, 34) + resize(product10, 34);
  sum9 <= (32 => '0', OTHERS => '1') WHEN (add_temp_8(33) = '0' AND add_temp_8(32) /= '0') OR (add_temp_8(33) = '0' AND add_temp_8(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_8(33) = '1' AND add_temp_8(32) /= '1'
      ELSE (add_temp_8(32 DOWNTO 0));

  add_temp_9 <= resize(sum9, 34) + resize(product11, 34);
  sum10 <= (32 => '0', OTHERS => '1') WHEN (add_temp_9(33) = '0' AND add_temp_9(32) /= '0') OR (add_temp_9(33) = '0' AND add_temp_9(32 DOWNTO 0) = "011111111111111111111111111111111") -- special case0
      ELSE (32 => '1', OTHERS => '0') WHEN add_temp_9(33) = '1' AND add_temp_9(32) /= '1'
      ELSE (add_temp_9(32 DOWNTO 0));

  output_typeconvert <= (15 => '0', OTHERS => '1') WHEN (sum10(32) = '0' AND sum10(31) /= '0') OR (sum10(32) = '0' AND sum10(31 DOWNTO 16) = "0111111111111111") -- special case0
      ELSE (15 => '1', OTHERS => '0') WHEN sum10(32) = '1' AND sum10(31) /= '1'
      ELSE (resize(shift_right(sum10(32) & sum10(31 DOWNTO 0) + ( "0" & (sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16) & NOT sum10(16))), 16), 16));

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
