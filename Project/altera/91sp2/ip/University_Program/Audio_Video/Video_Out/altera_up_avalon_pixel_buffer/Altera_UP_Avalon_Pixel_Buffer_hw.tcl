# +----------------------------------------------------------------------------+
# | License Agreement                                                          |
# |                                                                            |
# | Copyright (c) 1991-2009 Altera Corporation, San Jose, California, USA.     |
# | All rights reserved.                                                       |
# |                                                                            |
# | Any megafunction design, and related net list (encrypted or decrypted),    |
# |  support information, device programming or simulation file, and any other |
# |  associated documentation or information provided by Altera or a partner   |
# |  under Altera's Megafunction Partnership Program may be used only to       |
# |  program PLD devices (but not masked PLD devices) from Altera.  Any other  |
# |  use of such megafunction design, net list, support information, device    |
# |  programming or simulation file, or any other related documentation or     |
# |  information is prohibited for any other purpose, including, but not       |
# |  limited to modification, reverse engineering, de-compiling, or use with   |
# |  any other silicon devices, unless such use is explicitly licensed under   |
# |  a separate agreement with Altera or a megafunction partner.  Title to     |
# |  the intellectual property, including patents, copyrights, trademarks,     |
# |  trade secrets, or maskworks, embodied in any such megafunction design,    |
# |  net list, support information, device programming or simulation file, or  |
# |  any other related documentation or information provided by Altera or a    |
# |  megafunction partner, remains with Altera, the megafunction partner, or   |
# |  their respective licensors.  No other licenses, including any licenses    |
# |  needed under any third party's intellectual property, are provided herein.|
# |  Copying or modifying any file, or portion thereof, to which this notice   |
# |  is attached violates this copyright.                                      |
# |                                                                            |
# | THIS FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    |
# | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   |
# | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    |
# | THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER |
# | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    |
# | FROM, OUT OF OR IN CONNECTION WITH THIS FILE OR THE USE OR OTHER DEALINGS  |
# | IN THIS FILE.                                                              |
# |                                                                            |
# | This agreement shall be governed in all respects by the laws of the State  |
# |  of California and by the laws of the United States of America.            |
# |                                                                            |
# +----------------------------------------------------------------------------+

# TCL File Generated by Altera University Program
# DO NOT MODIFY

# +-----------------------------------
# | module altera_up_avalon_pixel_buffer
# | 
set_module_property DESCRIPTION "A Pixel Buffer (DMA Controller) for DE Boards"
set_module_property NAME altera_up_avalon_pixel_buffer
set_module_property VERSION 9.0
set_module_property GROUP "University Program/Audio & Video/Video Out"
set_module_property AUTHOR "Altera University Program"
set_module_property DISPLAY_NAME "Pixel Buffer for VGA Display"
set_module_property DATASHEET_URL "ftp.altera.com/up/archive/QII_9.0/Altera_Material/University_Program_IP/Audio_Video/Video_Out/Video_Out.pdf"
#set_module_property TOP_LEVEL_HDL_FILE Altera_UP_Avalon_Pixel_Buffer.v
#set_module_property TOP_LEVEL_HDL_MODULE Altera_UP_Avalon_Pixel_Buffer
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE false
set_module_property SIMULATION_MODEL_IN_VERILOG false
set_module_property SIMULATION_MODEL_IN_VHDL false
set_module_property SIMULATION_MODEL_HAS_TULIPS false
set_module_property SIMULATION_MODEL_IS_OBFUSCATED false
set_module_property VALIDATION_CALLBACK validate
set_module_property ELABORATION_CALLBACK elaborate
set_module_property GENERATION_CALLBACK generate
# | 
# +-----------------------------------

# +-----------------------------------
# | files
# | 
#add_file Altera_UP_Avalon_Pixel_Buffer.v {SYNTHESIS SIMULATION}
# | 
# +-----------------------------------

# +-----------------------------------
# | parameters
# | 
add_parameter board string DE2
set_parameter_property board DISPLAY_NAME "DE Board"
set_parameter_property board GROUP "Device and Mode"
set_parameter_property board UNITS None
set_parameter_property board AFFECTS_PORT_WIDTHS true
set_parameter_property board ALLOWED_RANGES {DE1 DE2 "DE2-70"}
#set_parameter_property board ALLOWED_RANGES {DE1 DE2}
set_parameter_property board VISIBLE true
set_parameter_property board ENABLED true

add_parameter vga_device string "VGA Connector"
set_parameter_property vga_device DISPLAY_NAME "Video Out Device"
set_parameter_property vga_device GROUP "Device and Mode"
set_parameter_property vga_device UNITS None
set_parameter_property vga_device AFFECTS_PORT_WIDTHS true
set_parameter_property vga_device ALLOWED_RANGES {"VGA Connector" "LCD Screen (TRDB_LCM)" "LCD Screen with Touch Panel (TRDB_LTM)"}
set_parameter_property vga_device VISIBLE true
set_parameter_property vga_device ENABLED true

add_parameter start_address string "00000000" 
set_parameter_property start_address DISPLAY_NAME "Default Buffer Start Address (hex)"
set_parameter_property start_address GROUP "Device and Mode"
set_parameter_property start_address UNITS None
set_parameter_property start_address AFFECTS_PORT_WIDTHS true
set_parameter_property start_address VISIBLE true
set_parameter_property start_address ENABLED true

add_parameter back_start_address string "00000000" 
set_parameter_property back_start_address DISPLAY_NAME "Default Back Buffer Start Address (hex)"
set_parameter_property back_start_address GROUP "Device and Mode"
set_parameter_property back_start_address UNITS None
set_parameter_property back_start_address AFFECTS_PORT_WIDTHS true
set_parameter_property back_start_address VISIBLE true
set_parameter_property back_start_address ENABLED true

add_parameter addr_mode string "X-Y" 
set_parameter_property addr_mode DISPLAY_NAME "Addressing Mode"
set_parameter_property addr_mode GROUP "Device and Mode"
set_parameter_property addr_mode UNITS None
set_parameter_property addr_mode AFFECTS_PORT_WIDTHS true
set_parameter_property addr_mode ALLOWED_RANGES {"Consecutive" "X-Y"}
set_parameter_property addr_mode VISIBLE true
set_parameter_property addr_mode ENABLED true

add_parameter enlarge_width int "2" 
set_parameter_property enlarge_width DISPLAY_NAME "Width Scaling Factor"
set_parameter_property enlarge_width GROUP "Image Options"
set_parameter_property enlarge_width UNITS None
set_parameter_property enlarge_width AFFECTS_PORT_WIDTHS true
set_parameter_property enlarge_width ALLOWED_RANGES {"1" "2" "4" "8"}
set_parameter_property enlarge_width VISIBLE true
set_parameter_property enlarge_width ENABLED true

add_parameter enlarge_height int "2"
set_parameter_property enlarge_height DISPLAY_NAME "Height Scaling Factor"
set_parameter_property enlarge_height GROUP "Image Options"
set_parameter_property enlarge_height UNITS None
set_parameter_property enlarge_height AFFECTS_PORT_WIDTHS true
set_parameter_property enlarge_height ALLOWED_RANGES {"1" "2" "4" "8"}
set_parameter_property enlarge_height VISIBLE true
set_parameter_property enlarge_height ENABLED true

add_parameter color_space string "16-bit RGB"
set_parameter_property color_space DISPLAY_NAME "Color Space"
set_parameter_property color_space GROUP "Image Options"
set_parameter_property color_space UNITS None
set_parameter_property color_space AFFECTS_PORT_WIDTHS true
set_parameter_property color_space ALLOWED_RANGES {"8-bit Grayscale" "16-bit RGB" "24-bit RGB" "30-bit RGB"}
set_parameter_property color_space VISIBLE true
set_parameter_property color_space ENABLED true
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point clock_reset
# | 
add_interface clock_reset clock end
set_interface_property clock_reset ptfSchematicName ""

add_interface_port clock_reset clk clk Input 1
add_interface_port clock_reset reset reset Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point avalon_pixel_buffer_slave
# | 
add_interface avalon_pixel_buffer_slave avalon end
set_interface_property avalon_pixel_buffer_slave holdTime 0
set_interface_property avalon_pixel_buffer_slave linewrapBursts false
set_interface_property avalon_pixel_buffer_slave minimumUninterruptedRunLength 1
set_interface_property avalon_pixel_buffer_slave bridgesToMaster ""
set_interface_property avalon_pixel_buffer_slave isMemoryDevice false
set_interface_property avalon_pixel_buffer_slave burstOnBurstBoundariesOnly false
set_interface_property avalon_pixel_buffer_slave addressSpan 16
set_interface_property avalon_pixel_buffer_slave timingUnits Cycles
set_interface_property avalon_pixel_buffer_slave setupTime 0
set_interface_property avalon_pixel_buffer_slave writeWaitTime 0
set_interface_property avalon_pixel_buffer_slave isNonVolatileStorage false
set_interface_property avalon_pixel_buffer_slave addressAlignment DYNAMIC
set_interface_property avalon_pixel_buffer_slave readWaitStates 0
set_interface_property avalon_pixel_buffer_slave maximumPendingReadTransactions 0
set_interface_property avalon_pixel_buffer_slave readWaitTime 0
set_interface_property avalon_pixel_buffer_slave readLatency 1
set_interface_property avalon_pixel_buffer_slave printableDevice false
		
set_interface_property avalon_pixel_buffer_slave ASSOCIATED_CLOCK clock_reset
		
add_interface_port avalon_pixel_buffer_slave slave_address address Input 2
add_interface_port avalon_pixel_buffer_slave slave_byteenable byteenable Input 4
add_interface_port avalon_pixel_buffer_slave slave_read read Input 1
add_interface_port avalon_pixel_buffer_slave slave_write write Input 1
add_interface_port avalon_pixel_buffer_slave slave_writedata writedata Input 32
add_interface_port avalon_pixel_buffer_slave slave_readdata readdata Output 32
# |
# +-----------------------------------

# +-----------------------------------
# | connection point avalon_pixel_buffer_master
# | 
add_interface avalon_pixel_buffer_master avalon start
set_interface_property avalon_pixel_buffer_master linewrapBursts false
set_interface_property avalon_pixel_buffer_master adaptsTo ""
set_interface_property avalon_pixel_buffer_master doStreamReads false
set_interface_property avalon_pixel_buffer_master doStreamWrites false
set_interface_property avalon_pixel_buffer_master burstOnBurstBoundariesOnly false

set_interface_property avalon_pixel_buffer_master ASSOCIATED_CLOCK clock_reset

add_interface_port avalon_pixel_buffer_master master_readdatavalid readdatavalid Input 1
add_interface_port avalon_pixel_buffer_master master_waitrequest waitrequest Input 1
add_interface_port avalon_pixel_buffer_master master_address address Output 32
add_interface_port avalon_pixel_buffer_master master_arbiterlock arbiterlock Output 1
add_interface_port avalon_pixel_buffer_master master_read read Output 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point avalon_pixel_buffer_source
# | 
add_interface avalon_pixel_buffer_source avalon_streaming start
set_interface_property avalon_pixel_buffer_source maxChannel 0
set_interface_property avalon_pixel_buffer_source errorDescriptor ""
set_interface_property avalon_pixel_buffer_source readyLatency 0
set_interface_property avalon_pixel_buffer_source dataBitsPerSymbol 10
set_interface_property avalon_pixel_buffer_source symbolsPerBeat 3

set_interface_property avalon_pixel_buffer_source ASSOCIATED_CLOCK clock_reset

add_interface_port avalon_pixel_buffer_source stream_ready ready Input 1
add_interface_port avalon_pixel_buffer_source stream_data data Output 30
add_interface_port avalon_pixel_buffer_source stream_startofpacket startofpacket Output 1
add_interface_port avalon_pixel_buffer_source stream_endofpacket endofpacket Output 1
add_interface_port avalon_pixel_buffer_source stream_empty empty Output 2
add_interface_port avalon_pixel_buffer_source stream_valid valid Output 1
# | 
# +-----------------------------------
	
# +-----------------------------------
# | Validation function
# | 
proc validate {} {
	set board [ get_parameter_value "board" ]
	set vga_device [ get_parameter_value "vga_device"]
	set start_address [ get_parameter_value "start_address"]
	set back_start_address [ get_parameter_value "back_start_address"]
	set addr_mode [ get_parameter_value "addr_mode"]
	set enlarge_width [ get_parameter_value "enlarge_width" ]
	set enlarge_height [ get_parameter_value "enlarge_height" ]
	set color_space [ get_parameter_value "color_space" ]

	if { $vga_device == "VGA Connector" } {
		set width_out "640"
		set height_out "480"
	} elseif { $vga_device == "LCD Screen (TRDB_LCM)" } {
		set width_out "320"
		set height_out "240"
	} else {
		set width_out "800"
		set height_out "480"
	}
	set width_in [ expr $width_out / $enlarge_width ] 
	set height_in [ expr $height_out / $enlarge_height ] 

	if { $color_space == "8-bit Grayscale" } {
		set color_info "Color Format Conversion: 8-bit Grayscale -> 30-bit RGB"
	} elseif { $color_space == "16-bit RGB" } {
		set color_info "Color Format Conversion: 16-bit RGB -> 30-bit RGB"
	} elseif { $color_space == "24-bit RGB" } {
		set color_info "Color Format Conversion: 24-bit RGB -> 30-bit RGB"
	} else {
		set color_info "Color Format: 30-bit RGB"
	}

	if { ($enlarge_width * $enlarge_height) > 1 } {
		send_message info "Video Format Conversion: $width_in x $height_in -> $width_out x $height_out and $color_info"
	} else {
		send_message info "Video Format: $width_out x $height_out and $color_info"
	}
}
# | 
# +-----------------------------------

# +-----------------------------------
# | Elaboration function
# | 
proc elaborate {} {
	set board [ get_parameter_value "board" ]
	set vga_device [ get_parameter_value "vga_device"]
	set start_address [ get_parameter_value "start_address"]
	set back_start_address [ get_parameter_value "back_start_address"]
	set addr_mode [ get_parameter_value "addr_mode"]
	set enlarge_width [ get_parameter_value "enlarge_width" ]
	set enlarge_height [ get_parameter_value "enlarge_height" ]
	set color_space [ get_parameter_value "color_space" ]

	if { $color_space == "8-bit Grayscale" } {
		# Change the data width property of the connection point avalon_pixel_buffer_master
		add_interface_port avalon_pixel_buffer_master master_readdata readdata Input 8
	} elseif { $color_space == "16-bit RGB" } {
		# Change the data width property of the connection point avalon_pixel_buffer_master
		add_interface_port avalon_pixel_buffer_master master_readdata readdata Input 16
	} else {
		# Change the data width property of the connection point avalon_pixel_buffer_master
		add_interface_port avalon_pixel_buffer_master master_readdata readdata Input 32
	}
}
# | 
# +-----------------------------------

# +-----------------------------------
# | Generation function
# | 
proc generate {} {
	send_message info "Starting Generation of VGA Pixel Buffer"

	# get generation settings
	set language [ format "lang=%s" [ get_generation_setting HDL_LANGUAGE ] ]
	set outdir [ format "dir=%s" [ get_generation_setting OUTPUT_DIRECTORY ] ]
	set outname [ format "name=%s" [ get_generation_setting OUTPUT_NAME ] ]


	# get parameter values
	set board [ get_parameter_value "board" ]
	set vga_device [ get_parameter_value "vga_device"]
	set start_address [ get_parameter_value "start_address"]
	set back_start_address [ get_parameter_value "back_start_address"]
	set addr_mode [ get_parameter_value "addr_mode"]
	set enlarge_width [ get_parameter_value "enlarge_width" ]
	set enlarge_height [ get_parameter_value "enlarge_height" ]
	set color_space [ get_parameter_value "color_space" ]

	if { $vga_device == "VGA Connector" } {
		set width_out "640"
		set height_out "480"
	} elseif { $vga_device == "LCD Screen (TRDB_LCM)" } {
		set width_out "320"
		set height_out "240"
	} else {
		set width_out "800"
		set height_out "480"
	}
	set width_in  [ expr $width_out / $enlarge_width ] 
	set height_in [ expr $height_out / $enlarge_height ] 


	set start_addr "DEFAULT_BUFFER_ADDRESS:32'h$start_address"
	set back_addr "DEFAULT_BACK_BUF_ADDRESS:32'h$back_start_address"

	set addr_width	[ format "AW:%.0f" [ expr ceil ((log ($width_in * $height_in) / (log (2))) - 1.0) ] ]
	
	set wiw			[ format "WIW:%.0f" [ expr ceil ((log ($width_in) / (log (2))) - 1.0) ] ]
	set hiw			[ format "HIW:%.0f" [ expr ceil ((log ($height_in) / (log (2))) - 1.0) ] ]
	set wow			[ format "WOW:%.0f" [ expr ceil ((log ($width_out) / (log (2))) - 1.0) ] ]
	set how			[ format "HOW:%.0f" [ expr ceil ((log ($height_out) / (log (2))) - 1.0) ] ]

	if { $color_space == "8-bit Grayscale" } {
		set dw "DW:7"
	} elseif { $color_space == "16-bit RGB" } {
		set dw "DW:15"
	} else {
		set dw "DW:31"
	}
	if { $enlarge_width == 8 } {
		set ew "ENLARGE_WIDTH:3"
	} elseif { $enlarge_width == 4 } {
		set ew "ENLARGE_WIDTH:2"
	} else {
		set ew "ENLARGE_WIDTH:1"
	}

	set pixels_in	"PIXELS_IN:$width_in"
	set lines_in	"LINES_IN:$height_in"
	set pixels_out	"PIXELS_OUT:$width_out"
	set lines_out	"LINES_OUT:$height_out"
	
	if { $enlarge_width == 8 } {
		set ew "ENLARGE_WIDTH:3"
	} elseif { $enlarge_width == 4 } {
		set ew "ENLARGE_WIDTH:2"
	} else {
		set ew "ENLARGE_WIDTH:1"
	}

	if { $enlarge_height == 8 } {
		set eh "ENLARGE_HEIGHT:3"
	} elseif { $enlarge_height == 4 } {
		set eh "ENLARGE_HEIGHT:2"
	} else {
		set eh "ENLARGE_HEIGHT:1"
	}

	set eh_fifo_aw		[ format "EH_FIFO_ADDRESS_WIDTH:%.0f" [ expr ceil (log ($width_in) / (log (2))) ] ]
	set eh_fifo_size	[ format "EH_FIFO_SIZE:%.0f" [ expr pow (2, ceil (log ($width_in) / (log (2)))) ] ]

	# set section value
	set use_con_addr_mode	[ format "USE_CONSECUTIVE_ADDRESSING:%d" [ string match "Consecutive" $addr_mode ] ]

	set use_enlarge_width "USE_ENLARGE_PIXEL_WIDTH:1"
	if { $enlarge_width == 1 } {
		set use_enlarge_width "USE_ENLARGE_PIXEL_WIDTH:0"
	}
	set use_enlarge_height "USE_ENLARGE_PIXEL_HEIGHT:1"
	if { $enlarge_height == 1 } {
		set use_enlarge_height "USE_ENLARGE_PIXEL_HEIGHT:0"
	}

	set use_8bit_color		"USE_8BIT_COLOR:0"
	set use_16bit_color		"USE_16BIT_COLOR:0"
	set use_24bit_color		"USE_24BIT_COLOR:0"
	set use_halfword_mode	"USE_HALFWORD_ADDRESSING_MODE:0"
	set use_word_mode		"USE_WORD_ADDRESSING_MODE:0"
	if { $color_space == "8-bit Grayscale" } {
		set use_8bit_color		"USE_8BIT_COLOR:1"
	} elseif { $color_space == "16-bit RGB" } {
		set use_16bit_color		"USE_16BIT_COLOR:1"
		set use_halfword_mode	"USE_HALFWORD_ADDRESSING_MODE:1"
	} elseif { $color_space == "24-bit RGB" } {
		set use_24bit_color		"USE_24BIT_COLOR:1"
		set use_word_mode		"USE_WORD_ADDRESSING_MODE:1"
	} else {
		set use_word_mode		"USE_WORD_ADDRESSING_MODE:1"
	}

	# set top_level_ports and external_port

	# set arguments
	set files "files=Altera_UP_Avalon_Pixel_Buffer.v"
	set params "$start_addr;$back_addr;$addr_width;$wiw;$hiw;$wow;$how;$pixels_in;$lines_in;$pixels_out;$lines_out;$ew;$eh;$eh_fifo_aw;$eh_fifo_size"
	set sections "$use_con_addr_mode;$use_enlarge_width;$use_enlarge_height;$use_8bit_color;$use_16bit_color;$use_24bit_color;$use_halfword_mode;$use_word_mode"

	# get generation settings
#	set dest_language	[ get_generation_setting HDL_LANGUAGE ]
	set dest_dir 		[ get_generation_setting OUTPUT_DIRECTORY ]
	set dest_name		[ get_generation_setting OUTPUT_NAME ]
	add_file "$dest_dir$dest_name.v" {SYNTHESIS SIMULATION}

	# Generate HDL
	source "UP_IP_Generator.tcl"
	up_generate "$dest_dir$dest_name.v" "hdl/Altera_UP_Avalon_Pixel_Buffer.v" $dest_name $params $sections
}
# | 
# +-----------------------------------

